<!DOCTYPE HTML>
  <html>
    <head>
      <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
      <link rel="manifest" href="/manifest.json">
      <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
      <meta name="theme-color" content="#ffffff">
      <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
      <link rel="stylesheet" type="text/css" href="/styles.css">
      <title>DSFML - dsfml.network.ftp</title>
    </head>
    <body>
      <div class="main">
        <?php include '../../header.php'?>
        <div class="inner" class="content">
          <article class="module">
            <h1 class="module_name">dsfml.network.ftp</h1>
            <section id="module_content"><section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    The <u>Ftp</u> class is a very simple FTP client that allows you to communicate with
 an FTP server. The FTP protocol allows you to manipulate a remote file system
 (list files, upload, download, create, remove, ...).

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    Using the FTP client consists of 4 parts:
 <ul class="lists"> <li>Connecting to the FTP server</li>
 <li>Logging in (either as a registered user or anonymously)</li>
 <li>Sending commands to the server</li>
 <li>Disconnecting (this part can be done implicitly by the destructor)</li></ul>
<br><br>
 <p class="para"> Every command returns a FTP response, which contains the status code as well
 as a message from the server. Some commands such as <code class="prettyprint">getWorkingDirectory()</code>
 and <code class="prettyprint">getDirectoryListing()</code> return additional data, and use a class derived
 from <code class="prettyprint">Ftp.Response</code> to provide this data. The most often used commands are
 directly provided as member functions, but it is also possible to use
 specific commands with the <code class="prettyprint">sendCommand()</code> function.
<br><br>
 Note that response statuses &gt;= 1000 are not part of the FTP standard,
 they are generated by SFML when an internal error occurs.
<br><br>
 All commands, especially upload and download, may take some time to complete.
 This is important to know if you don't want to block your application while
 the server is completing the task.</p>


  </p>
</div>
<div class="ddoc_section">
  <p class="para">
    <span class="ddoc_section_h">Example:</span>

<section class="code_listing">
  <div class="code_sample">
    <pre><code class="prettyprint">// Create a new FTP client
auto <span class="psymbol">ftp</span> = new Ftp();

// Connect to the server
auto response = <span class="psymbol">ftp</span>.connect("ftp://ftp.myserver.com");
if (response.isOk())
    writeln("Connected");

// Log in
response = <span class="psymbol">ftp</span>.login("laurent", "dF6Zm89D");
if (response.isOk())
    writeln("Logged in");

// Print the working directory
auto directory = <span class="psymbol">ftp</span>.getWorkingDirectory();
if (directory.isOk())
    writeln("Working directory: ", directory.getDirectory());

// Create a new directory
response = <span class="psymbol">ftp</span>.createDirectory("files");
if (response.isOk())
    writeln("Created new directory");

// Upload a file to this new directory
response = <span class="psymbol">ftp</span>.upload("local-path/file.txt", "files", sf::Ftp::Ascii);
if (response.isOk())
    writeln("File uploaded");

// Send specific commands (here: FEAT to list supported FTP features)
response = <span class="psymbol">ftp</span>.sendCommand("FEAT");
if (response.isOk())
    writeln("Feature list:\n", response.getMessage());

// Disconnect from the server (optional)
<span class="psymbol">ftp</span>.disconnect();
</code></pre>
  </div>
</section>

  </p>
</div>

</section>
<section class="section ddoc_module_members_section">
  <div class="ddoc_module_members">
    <ul class="ddoc_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp" id="Ftp">class Ftp;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    An FTP client.
  </p>
</div>

</section>
<ul class="ddoc_class_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.TransferMode" id="Ftp.TransferMode">enum TransferMode: int;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Enumeration of transfer modes.
  </p>
</div>

</section>
<ul class="ddoc_enum_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.TransferMode.Binary" id="Ftp.TransferMode.Binary">Binary</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Binary mode (file is transfered as a sequence of bytes)
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.TransferMode.Ascii" id="Ftp.TransferMode.Ascii">Ascii</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Text mode using ASCII encoding.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.TransferMode.Ebcdic" id="Ftp.TransferMode.Ebcdic">Ebcdic</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Text mode using EBCDIC encoding.
  </p>
</div>

</section>

</div>

</li>
</ul>
</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.this" id="Ftp.this">this();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Default Constructor.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.getWorkingDirectory" id="Ftp.getWorkingDirectory">DirectoryResponse getWorkingDirectory();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Get the current working directory.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The working directory is the root path for subsequent operations
 involving directories and/or filenames.


  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.getDirectoryListing" id="Ftp.getDirectoryListing">ListingResponse getDirectoryListing(const(char)[] directory = "");
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Get the contents of the given directory.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    This function retrieves the sub-directories and files contained in the
 given directory. It is not recursive. The directory parameter is relative
 to the current working directory.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] directory</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Directory to list
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.changeDirectory" id="Ftp.changeDirectory">Response changeDirectory(const(char)[] directory);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Change the current working directory.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The new directory must be relative to the current one.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] directory</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      New working directory
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.connect" id="Ftp.connect">Response connect(IpAddress address, ushort port = 21, Time timeout = Time.Zero);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Connect to the specified FTP server.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The port has a default value of 21, which is the standard port used by
 the FTP protocol. You shouldn't use a different value, unless you really
 know what you do.
<br><br>
 This function tries to connect to the server so it may take a while to
 complete, especially if the server is not reachable. To avoid blocking
 your application for too long, you can use a timeout. The default value,
 Time.Zero, means that the system timeout will be used (which is
 usually pretty long).


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">IpAddress address</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Address of the FTP server to connect to
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">ushort port</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Port used for the connection
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">Time timeout</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Maximum time to wait
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.connect.2" id="Ftp.connect.2">Response connect(const(char)[] address, ushort port = 21, Time timeout = Time.Zero);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Connect to the specified FTP server.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The port has a default value of 21, which is the standard port used by
 the FTP protocol. You shouldn't use a different value, unless you really
 know what you do.
<br><br>
 This function tries to connect to the server so it may take a while to
 complete, especially if the server is not reachable. To avoid blocking
 your application for too long, you can use a timeout. The default value,
 Time.Zero, means that the system timeout will be used (which is
 usually pretty long).


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] address</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Name or ddress of the FTP server to connect to
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">ushort port</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Port used for the connection
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">Time timeout</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Maximum time to wait
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.deleteDirectory" id="Ftp.deleteDirectory">Response deleteDirectory(const(char)[] name);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Remove an existing directory.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The directory to remove must be relative to the current working
 directory. Use this function with caution, the directory will be removed
 permanently!


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] name</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Name of the directory to remove
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.deleteFile" id="Ftp.deleteFile">Response deleteFile(const(char)[] name);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Remove an existing file.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The file name must be relative to the current working directory. Use this
 function with caution, the file will be removed permanently!


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] name</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Name of the file to remove
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.disconnect" id="Ftp.disconnect">Response disconnect();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Close the connection with the server.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.download" id="Ftp.download">Response download(const(char)[] remoteFile, const(char)[] localPath, TransferMode mode = TransferMode.Binary);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Download a file from the server.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The filename of the distant file is relative to the current working
 directory of the server, and the local destination path is relative to
 the current directory of your application.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] remoteFile</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Filename of the distant file to download
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] localPath</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Where to put to file on the local computer
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">TransferMode mode</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Transfer mode
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.keepAlive" id="Ftp.keepAlive">Response keepAlive();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Send a <code class="prettyprint">null</code> command to keep the connection alive.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    This command is useful because the server may close the connection
 automatically if no command is sent.


  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.login" id="Ftp.login">Response login();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Log in using an anonymous account.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    Logging in is mandatory after connecting to the server. Users that are
 not logged in cannot perform any operation.


  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.login.2" id="Ftp.login.2">Response login(const(char)[] name, const(char)[] password);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Log in using a username and a password.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    Logging in is mandatory after connecting to the server. Users that are
 not logged in cannot perform any operation.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] name</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      User name
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] password</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      The password
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.parentDirectory" id="Ftp.parentDirectory">Response parentDirectory();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Go to the parent directory of the current one.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.createDirectory" id="Ftp.createDirectory">Response createDirectory(const(char)[] name);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Create a new directory.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The new directory is created as a child of the current working directory.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] name</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Name of the directory to create
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.renameFile" id="Ftp.renameFile">Response renameFile(const(char)[] file, const(char)[] newName);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Rename an existing file.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The filenames must be relative to the current working directory.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] file</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      File to rename
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] newName</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      New name of the file
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.upload" id="Ftp.upload">Response upload(const(char)[] localFile, const(char)[] remotePath, TransferMode mode = TransferMode.Binary);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Upload a file to the server.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    The name of the local file is relative to the current working directory
 of your application, and the remote path is relative to the current
 directory of the FTP server.


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] localFile</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Path of the local file to upload
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] remotePath</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Where to put the file on the server
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">TransferMode mode</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Transfer mode
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.sendCommand" id="Ftp.sendCommand">Response sendCommand(const(char)[] command, const(char)[] parameter);
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Send a command to the FTP server.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    While the most often used commands are provided as member functions in
 the Ftp class, this method can be used to send any FTP command to the
 server. If the command requires one or more parameters, they can be
 specified in parameter. If the server returns information, you can
 extract it from the response using getMessage().


  </p>
</div>
<div class="ddoc_params">
  <h4>Parameters:</h4>
  <table cellspacing="0" cellpadding="0" border="1" class="graybox">
    <tbody>
      <tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] command</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Command to send
    </p>
  </div>
</td>
</tr>
<tr class="ddoc_param_row">
  <td scope="ddoc_param_id">
  <code class="prettyprint">const(char)[] parameter</code>
</td>
<td>
  <div class="ddoc_param_desc">
    <p class="param_desc">
      Command parameter
    </p>
  </div>
</td>
</tr>

    </tbody>
  </table>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Server response to the request.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.DirectoryResponse" id="Ftp.DirectoryResponse">class DirectoryResponse: <span class="ddoc_psuper_symbol">dsfml.network.ftp.Ftp.Response</span>;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Specialization of FTP response returning a directory.
  </p>
</div>

</section>
<ul class="ddoc_class_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.DirectoryResponse.getDirectory" id="Ftp.DirectoryResponse.getDirectory">const string getDirectory();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Get the directory returned in the response.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Directory name.
  </p>
</div>

</section>

</div>

</li>
</ul>
</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.ListingResponse" id="Ftp.ListingResponse">class ListingResponse: <span class="ddoc_psuper_symbol">dsfml.network.ftp.Ftp.Response</span>;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Specialization of FTP response returning a filename lisiting.
  </p>
</div>

</section>
<ul class="ddoc_class_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.ListingResponse.getFilenames" id="Ftp.ListingResponse.getFilenames">const const(string[]) getFilenames();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Return the array of directory/file names.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Array containing the requested listing.
  </p>
</div>

</section>

</div>

</li>
</ul>
</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.Response" id="Ftp.Response">class Response;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Define a FTP response.
  </p>
</div>

</section>
<ul class="ddoc_class_members">
  <li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.Response.Status" id="Ftp.Response.Status">enum Status: int;
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Status codes possibly returned by a FTP response.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.Response.getMessage" id="Ftp.Response.getMessage">const string getMessage();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Get the full message contained in the response.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    The message.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.Response.getStatus" id="Ftp.Response.getStatus">const Status getStatus();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Get the status code of the response.

  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    Status code.
  </p>
</div>

</section>

</div>

</li><li class="ddoc_member">
  <div class="ddoc_decl">
  <section class="section">
    <div class="declaration">
      <div class="dlang">
        <code class="prettyprint"><a class="decl_anchor" href="#Ftp.Response.isOk" id="Ftp.Response.isOk">const bool isOk();
</a></code>
      </div>
    </div>
  </section>
</div>
<div class="ddoc_decl_dd">
  <section class="section ddoc_sections">
  <div class="ddoc_summary">
  <p class="para">
    Check if the status code means a success.

  </p>
</div>
<div class="ddoc_description">
  <p class="para">
    This function is defined for convenience, it is equivalent to testing
 if the status code is &lt; 400.


  </p>
</div>
<div class="ddoc_returns">
  <h4>Returns:</h4>
  <p class="para">
    <code class="prettyprint">true</code> if the status is a success, <code class="prettyprint">false</code> if it is a failure.
  </p>
</div>

</section>

</div>

</li>
</ul>
</div>

</li>
</ul>
</div>

</li>
</ul>
  </div>
</section>
</section>
          </article>
        </div>
      </div>
      <?php include '../../footer.php'?>
        <script>
        var elements = document.getElementsByClassName("ddoc_decl");
        for (var i = 0; i < elements.length; ++i) {
        elements[i].innerHTML = elements[i].innerHTML.replace(/;/g,'');
        }
        var elements = document.getElementsByClassName("deprecated_decl");
        for (var i = 0; i < elements.length; ++i) {
        elements[i].innerHTML = elements[i].innerHTML.replace(/deprecated/g,'<span class="dep_kwd">deprecated</span>');
        }
        </script>
    </body>
  </html>